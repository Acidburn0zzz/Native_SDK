#version 310 es
// Autogenerated

// Note that we generally use #version 320 es however this compute shader makes use of an image load store format not supported by es profiles
// Support for this format is queried appropriately and this shader is then only used in that case 

// Offsets generated using generateGaussianCoefficients and generateGaussianWeightsAndOffsetsStrings()
// Number of iterations
// Example: const uint numIterations = 3;
%s
// Offsets used for the Gaussian Blur
// Example: const mediump float gOffsets[numIterations] = float[numIterations](-0.5, 0.0, 0.5);
%s

// Inverse Framebuffer Width and Heights
// Example: const highp float inverseFramebufferWidth = 1.0/800;
//			const highp float inverseFramebufferHeight = 1.0/600;
%s
%s

layout(location = 0) out mediump vec2 vTexCoords[numIterations];

void main()
{
	mediump vec2 texcoord = vec2((gl_VertexID << 1) & 2, gl_VertexID & 2);
	gl_Position = vec4(texcoord * 2.0 + -1.0, 0.0, 1.0);

	// Example: 1.0, 0.0 for the horizontal blur or 0.0, 1.0 for the vertical blur
	mediump vec2 blurDirection = vec2(%s);
	mediump vec2 pixelOffsets = vec2(inverseFramebufferWidth, inverseFramebufferHeight) * blurDirection;

	for (uint i = 0u; i < numIterations; ++i)
	{
		vTexCoords[i] = texcoord + gOffsets[i] * pixelOffsets;
	}
}