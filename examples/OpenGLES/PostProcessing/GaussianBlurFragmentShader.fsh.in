#version 310 es
// Autogenerated

// Note that we generally use #version 320 es however this compute shader makes use of an image load store format not supported by es profiles
// Support for this format is queried appropriately and this shader is then only used in that case 

// Weights and Offsets generated using generateGaussianCoefficients and generateGaussianWeightsAndOffsetsStrings()
// Number of iterations
// Example: const uint numIterations = 3;
%s
// Offsets used for the Gaussian Blur
// Example: const mediump float gOffsets[numIterations] = float[numIterations](-0.5, 0.0, 0.5);
%s
// Weights used for the Gaussian Blur
// Example: const mediump float gWeights[numIterations] = float[numIterations](0.25, 0.5, 0.25);
%s

// Inverse Framebuffer Width and Heights
// Example: const highp float inverseFramebufferWidth = 1.0/800;
//			const highp float inverseFramebufferHeight = 1.0/600;
%s
%s

layout(binding = 0) uniform mediump sampler2D sTexture;
layout(location = 0) out mediump float oColor;

layout(location = 0) in mediump vec2 vTexCoord;

void main()
{
	// Example: 1.0, 0.0 for the horizontal blur or 0.0, 1.0 for the vertical blur
	mediump vec2 blurDirection = vec2(%s);

	mediump vec2 pixelOffsets = vec2(inverseFramebufferWidth, inverseFramebufferHeight) * blurDirection;

	mediump float colorOut = 0.0;
	mediump float textureColor = 0.0;
	mediump vec2 texCoordOffset = vec2(0.0);

	for (uint i = 0u; i < numIterations; ++i)
	{
		texCoordOffset = gOffsets[i] * pixelOffsets;
		textureColor = texture(sTexture, vTexCoord + texCoordOffset).r;
		colorOut += gWeights[i] * textureColor;
	}

	oColor = colorOut;
}